package org.newstextanalyzer;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import edu.stanford.nlp.simple.Sentence;

public class SimpleClassifier implements IPipelineStep {
  private static final String LEMMAS_SYNSETS_FILE = "/Users/gpanez/Documents/news/lemmas/lemmas.txt";

  private List<String> triggerLemmas;

  public SimpleClassifier() {
    try {
      BufferedReader br = new BufferedReader(new FileReader(LEMMAS_SYNSETS_FILE));
      int numLemmas = Integer.parseInt(br.readLine());
      triggerLemmas = new ArrayList<>(numLemmas);
      for (int i = 0; i < numLemmas; i++) {
        String lemma = br.readLine();
        // TODO: Haven't found a way to deal with complex verb forms, e.g., give
        // up, so removing them from the trigger lemma list for now
        if (!(lemma.contains("_") || lemma.contains("-"))) {
          triggerLemmas.add(lemma);
        }
      }
      br.close();
    } catch (IOException ioe) {
      ioe.printStackTrace();
      throw new RuntimeException();
    }
    System.out.println("trigger lemmas count: " + triggerLemmas.size());
    System.out.println("trigger lemmas list: " + triggerLemmas.toString());
  }

  public Object execute(String sentence, Object... extra) {
    // NOTE: Lemmas generated by the StanfordNLP pipeline for past tense verbs and
    // similar modes are converted to present tense verbs, matching what
    // was produced by Python NLTK and WordNet
    List<String> lemmas = (new Sentence(sentence)).lemmas();
    for (String lemma : lemmas) {
      if (triggerLemmas.contains(lemma)) {
        return Boolean.TRUE;
      }
    }
    return Boolean.FALSE;
  }

  @Override
  public Type getType() {
    return Type.CLASSIFIER;
  }

  @Override
  public void clean() {
    return;
  }
}
